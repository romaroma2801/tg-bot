from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import json
from logging.handlers import RotatingFileHandler
with open("/home/roman2801/nekuri_bot/store_full.json", "r", encoding="utf-8") as f:
    stores_data = json.load(f)

import logging
# –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã...
import zlib

def get_city_hash(city_name):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à (CRC32)."""
    return hex(zlib.crc32(city_name.encode('utf-8')))[2:]  # –ü—Ä–∏–º–µ—Ä: "–≥—Ä–æ–¥–Ω–æ" ‚Üí "a5b3c2d1"
log_file = '/home/roman2801/nekuri_log.txt'
handler = RotatingFileHandler(
    log_file,
    maxBytes=2*1024*1024,  # 2 MB (–º–∞–∫—Å —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    backupCount=3,         # –•—Ä–∞–Ω–∏—Ç—å 3 –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞
    encoding='utf-8'
)

logging.basicConfig(
    handlers=[handler],
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)
logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7549154782:AAHfSaSZ6rJYzWtC9x3_Iqa8xUnTGNybT3o'

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    keyboard = [
        [InlineKeyboardButton("üìç –ê–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data='addresses'),
         InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='review')],
        [InlineKeyboardButton("üì£ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", callback_data='socials'),
         InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ *NEKURI.BY!*\n\n"
    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
    "üìç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ\n"
    "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚Äî –µ–≥–æ —Å—Ä–∞–∑—É —É–≤–∏–¥–∏—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä\n"
    "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö\n"
    "üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–π —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
    "üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
)

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode="Markdown")
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton(region, callback_data=f"region_{region}")]
        for region in stores_data.keys()
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_main')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å:", reply_markup=reply_markup)


async def show_cities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    region = query.data.replace("region_", "")
    context.user_data['region'] = region

    keyboard = [
        [InlineKeyboardButton(city, callback_data=f"city_{city}")]
        for city in stores_data[region].keys()
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='addresses')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {region}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)


async def show_stores(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    city = query.data.replace("city_", "")
    region = context.user_data.get("region")
    context.user_data["city"] = city

    stores = stores_data[region][city]

    keyboard = [
        [InlineKeyboardButton(store["name"], callback_data=f"store_{i}")]
        for i, store in enumerate(stores)
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"region_{region}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"<b>{region}</b> ‚Üí <b>{city}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
from datetime import datetime, timedelta
import os

FEEDBACK_LOG_PATH = "/home/roman2801/nekuri_bot/feedback_log.json"

def load_feedback_log():
    if not os.path.exists(FEEDBACK_LOG_PATH):
        return {}
    try:
        with open(FEEDBACK_LOG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è feedback_log.json: {e}")
        return {}

def save_feedback_log(log_data):
    with open(FEEDBACK_LOG_PATH, "w", encoding="utf-8") as f:
        json.dump(log_data, f, ensure_ascii=False, indent=2)

def can_send_feedback(user_id):
    log = load_feedback_log()
    if str(user_id) not in log:
        return True, None
    last_time = datetime.fromisoformat(log[str(user_id)])
    now = datetime.now()
    delta = now - last_time
    if delta > timedelta(hours=24):
        return True, None
    time_left = timedelta(hours=24) - delta
    return False, time_left

async def show_store_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    try:
        index = int(query.data.replace("store_", ""))
        region = context.user_data.get("region")
        city = context.user_data.get("city")

        if not region or not city:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥.")
            return

        store = stores_data[region][city][index]

        text = (
            f"üè¨ <b>{store['name']}</b>\n"
            f"üìç <i>{store['address']}</i>\n"
            f"üïí <pre>{store['hours']}</pre>"
        )

        keyboard = [
            [InlineKeyboardButton("üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=store["map_url"])],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"city_{city}")]
        ]

        await query.edit_message_text(
            text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")


async def review_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    logger.info("‚ñ∂Ô∏è review_regions –≤—ã–∑–≤–∞–Ω")
    query = update.callback_query
    await query.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤...")

    user_id = update.effective_user.id
    allowed, time_left = can_send_feedback(user_id)

    if not allowed:
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes = remainder // 60
        msg = (f"‚è≥ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.\n"
               f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {time_left.days * 24 + hours} —á {minutes} –º–∏–Ω.")

        keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]]
        await query.edit_message_text(text=msg, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –µ—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    keyboard = [
        [InlineKeyboardButton(region, callback_data=f"review_region_{region}")]
        for region in stores_data.keys()
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–∑—ã–≤–∞:", reply_markup=reply_markup)

async def review_cities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    region = query.data.replace("review_region_", "")
    context.user_data['review_region'] = region

    keyboard = [
        [InlineKeyboardButton(city, callback_data=f"review_city_{city}")]
        for city in stores_data[region].keys()
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='review')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–†–µ–≥–∏–æ–Ω: {region}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

async def review_shops(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    city = query.data.replace("review_city_", "")
    region = context.user_data.get('review_region')
    context.user_data['review_city'] = city

    shops = stores_data[region][city]
    keyboard = [
        [InlineKeyboardButton(shop["name"], callback_data=f"review_shop_{index}")]
        for index, shop in enumerate(shops)
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"review_region_{region}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"{region} > {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=reply_markup)

async def review_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    shop_index = int(query.data.replace("review_shop_", ""))
    region = context.user_data['review_region']
    city = context.user_data['review_city']
    shop = stores_data[region][city][shop_index]

    context.user_data['review_shop'] = shop
    context.user_data['review_shop_index'] = shop_index

    keyboard = [
        [InlineKeyboardButton("‚≠ê", callback_data="rating_1")],
        [InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rating_2")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rating_3")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_4")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_5")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"review_city_{city}")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"–ú–∞–≥–∞–∑–∏–Ω: {shop['name']}\n\n–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:", reply_markup=reply_markup
    )
async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    rating = int(query.data.replace("rating_", ""))
    context.user_data['rating'] = rating

    keyboard = [
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"review_shop_{context.user_data['review_shop_index']}"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –≤ —á–∞—Ç.",
        reply_markup=reply_markup
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞" —á–µ—Ä–µ–∑ conversation pattern
from telegram.ext import MessageHandler, filters

async def handle_review_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    if context.user_data.get("sent_review_prompt"):
        return  # –£–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º

    user_message = update.message
    text = user_message.text

    if not text:
        return  # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∏–∫–µ—Ä ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    context.user_data['review_text'] = text
    context.user_data['sent_review_prompt'] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ –∫–Ω–æ–ø–∫–∏

    keyboard = [
        [InlineKeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="send_review")],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_rating"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É üëá",
        reply_markup=reply_markup
    )


async def send_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('review_text'):
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.")
        return

    user = update.effective_user
    region = context.user_data.get('review_region', '‚Äî')
    city = context.user_data.get('review_city', '‚Äî')
    shop = context.user_data.get('review_shop', {}).get('name', '‚Äî')
    rating = context.user_data.get('rating', '‚Äî')
    text = context.user_data.get('review_text', '‚Äî')
    photo = context.user_data.get('review_photo')

    review_message = (
        f"üõí –û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.first_name}:\n"
        f"üìç {region} ‚Üí {city} ‚Üí {shop}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}\n"
        f"üìù –û—Ç–∑—ã–≤:\n{text}"
    )

    manager_chat_id = 568416622  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID, –µ—Å–ª–∏ –±—É–¥–µ—Ç

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
    if photo:
        await context.bot.send_photo(chat_id=manager_chat_id, photo=photo, caption=review_message)
    else:
        await context.bot.send_message(chat_id=manager_chat_id, text=review_message)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("‚úÖ –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=reply_markup)

    # –û—á–∏—Å—Ç–∫–∞ user_data
    context.user_data.clear()
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–∑—ã–≤–∞
    feedback_log = load_feedback_log()
    feedback_log[str(user.id)] = datetime.now().isoformat()
    save_feedback_log(feedback_log)

async def submit_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    review_text = context.user_data.get('review_text', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞')
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    rating = context.user_data.get('rating', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    shop = context.user_data.get('shop', '–ù–µ –≤—ã–±—Ä–∞–Ω')

    message = (
        f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n"
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop}\n"
        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}\n"
        f"üí¨ –û—Ç–∑—ã–≤: {review_text}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    manager_id = '@nekuri_by_RB'  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ
    await context.bot.send_message(chat_id=manager_id, text=message)

    await query.edit_message_text("‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–ø–∞—Å–∏–±–æ!")

async def show_socials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    text = (
        "üì≤ –ú—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:\n\n"
        "üîó [Instagram](https://www.instagram.com/nekuri.by/)\n"
        "üîó [Telegram –∫–∞–Ω–∞–ª](https://t.me/nekuri_by)\n"
        "üîó [Telegram —á–∞—Ç](https://t.me/nekuri_by_brest)\n"
        "üîó [–í–ö–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/nekuribrest)\n"
        "üîó [TikTok](https://www.tiktok.com/@nekuri.by)"
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")

async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    await query.answer()

    text = (
        "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        "üì± *–ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è:* +375 (29) 225-13-34\n"
        "üë§ *–ú–µ–Ω–µ–¥–∂–µ—Ä:* [@nekuri_by_RB](https://t.me/nekuri_by_RB)\n"
        "üõí *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω:* [nekuri.by](https://nekuri.by)\n"
        "üì¶ *–û–ø—Ç–æ–≤—ã–π –æ—Ç–¥–µ–ª:* [nekuri.by/OPT.html](https://nekuri.by/OPT.html)"
    )

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    query = update.callback_query
    if not query:
        return
    data = query.data
    await query.answer()
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")


    if data == 'addresses':
        await show_regions(update, context)
    elif data == "main_menu":
        await start(update, context)
    elif data == 'contacts':
        await show_contacts(update, context)
    elif data == 'socials':
        await show_socials(update, context)
    elif data == 'review':
        await review_regions(update, context)
    elif data.startswith('review_region_'):
        await review_cities(update, context)
    elif data.startswith('review_city_'):
        await review_shops(update, context)
    elif data.startswith('review_shop_'):
        await review_rating(update, context)
    elif data.startswith('rating_'):
        await handle_rating(update, context)
    elif data == 'send_review':
        await send_review(update, context)
    elif data == 'review_rating_back':
        await review_rating(update, context)
    elif data == 'back_main':
        await start(update, context)
    elif data.startswith('region_'):
        await show_cities(update, context)
    elif data.startswith('city_'):
        await show_stores(update, context)
    elif data.startswith("store_"):
        await show_store_info(update, context)
    else:
        await query.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ")


from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import difflib

async def public_city_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "private":
        return

    text = update.message.text.strip().lower()
    all_cities = {
        city.lower(): (region, city)
        for region, cities in stores_data.items()
        for city in cities
    }
    closest = difflib.get_close_matches(text, all_cities.keys(), n=1, cutoff=0.6)

    if not closest:
        return

    matched_city = closest[0]
    region, city = all_cities[matched_city]
    city_hash = get_city_hash(city)  # –•–µ—à–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

    shops = stores_data[region][city]
    keyboard = [
        [InlineKeyboardButton(shop["name"], callback_data=f"public_store_{city_hash}_{i}")]
        for i, shop in enumerate(shops)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"üèô –ú–∞–≥–∞–∑–∏–Ω—ã –≤ {city}:", reply_markup=reply_markup)

async def public_store_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: public_store_<city_hash>_<shop_index>
        parts = query.data.split("_")
        if len(parts) != 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")

        city_hash = parts[2]  # –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å ‚Äî —Ö–µ—à –≥–æ—Ä–æ–¥–∞
        shop_index = int(parts[3])  # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–∞—Å—Ç—å ‚Äî –∏–Ω–¥–µ–∫—Å –º–∞–≥–∞–∑–∏–Ω–∞

        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥ –ø–æ —Ö–µ—à—É
        city = None
        region = None
        for reg, cities in stores_data.items():
            for city_name in cities:
                if get_city_hash(city_name) == city_hash:
                    city = city_name
                    region = reg
                    break
            if city:
                break

        if not city:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        store = stores_data[region][city][shop_index]
        text = (
            f"üè¨ <b>{store['name']}</b>\n"
            f"üìç <i>{store['address']}</i>\n"
            f"üïí <pre>{store['hours']}</pre>"
        )
        keyboard = [
            [InlineKeyboardButton("üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=store["map_url"])],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"public_back_{city_hash}")]
        ]
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ public_store_info: {e}, callback_data: {query.data}")


async def public_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: public_back_<city_hash>
        city_hash = query.data.replace("public_back_", "")

        # –ù–∞—Ö–æ–¥–∏–º –≥–æ—Ä–æ–¥ –ø–æ —Ö–µ—à—É
        city = None
        region = None
        for reg, cities in stores_data.items():
            for city_name in cities:
                if get_city_hash(city_name) == city_hash:
                    city = city_name
                    region = reg
                    break
            if city:
                break

        if not city:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        shops = stores_data[region][city]
        keyboard = [
            [InlineKeyboardButton(shop["name"], callback_data=f"public_store_{city_hash}_{i}")]
            for i, shop in enumerate(shops)
        ]
        await query.edit_message_text(
            f"üèô –ú–∞–≥–∞–∑–∏–Ω—ã –≤ {city}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ public_back: {e}, callback_data: {query.data}")

if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CallbackQueryHandler(public_store_info, pattern=r"^public_store_"))
    app.add_handler(CallbackQueryHandler(public_back, pattern=r"^public_back_"))
    app.add_handler(CallbackQueryHandler(handle_buttons))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, handle_review_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.ChatType.PRIVATE, public_city_search))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()





